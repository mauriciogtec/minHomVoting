voting_sample1 <- data.frame(
row.names = c("A", "B", "C", "D", "E"),
I1 = c(1, 1, 0, 0, 0),
I2 = c(1, 1, 1, 0, 0),
I3 = c(1, 1, 1, 1, 0),
I4 = c(0, 1, 1, 1, 1),
I5 = c(1, 1, 1, 1, 1)
)
library(devtools)
install.packages("devtools")
onedim_voting <- data.frame(
row.names = c("A", "B", "C", "D", "E"),
I1 = c(1, 1, 0, 0, 0),
I2 = c(1, 1, 1, 0, 0),
I3 = c(1, 1, 1, 1, 0),
I4 = c(0, 1, 1, 1, 1),
I5 = c(1, 1, 1, 1, 1)
)
library(devtools)
use_data(onedim_voting)
document()
install.packages("igraph")
A <- matrix(1:9, nrow = 3, ncol = 3)
A
library(Matrix)
sessionInfo()
rankMatrix(A)
use_data(onedim_voting)
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
use_data(onedim_voting)
onedim_voting <- data.frame(
row.names = c("A", "B", "C", "D", "E"),
I1 = c(1, 1, 0, 0, 0),
I2 = c(1, 1, 1, 0, 0),
I3 = c(1, 1, 1, 1, 0),
I4 = c(0, 1, 1, 1, 1),
I5 = c(1, 1, 1, 1, 1)
)
document()
library(devtools)
document()
use_data(onedim_voting)
document()
document()
document()
document()
document()
create()
install()
source('C:/Github/minHomVoting/R/graphUtils.R')
source('C:/Github/minHomVoting/R/graphUtils.R')
document()
document()
document()
install()
library(devtools)
document()
install()
install()
help(package = "minHomVoting")
document()
install()
help(package = "minHomVoting")
help(package = "minHomVoting")
help(package = "minHomVoting")
document()
library(devtools)
document()
install()
help(package = "minHomVoting")
?onedim_voting
data("onedim_voting")
?onedim_voting
library(devtools)
document()
install()
library(minHomVoting)
?onedim_voting
document()
?onedim_voting
onedim_voting
d <- onedim_voting
d
gen_nodes <- function(d) {
c(
paste0("V", row.names(d)),
paste0("Y", 1:ncol(d)),
paste0("N", 1:ncol(d))
)
}
gen_nodes(d)
nodes <- gen_nodes(d)
edges <- expand.grid(d, d)
edges
nodes <- gen_nodes(d)
edges <- expand.grid(d, d)
edges
nodes
n <- length(nodes)
combn(nodes, 2)
x <- combn(nodes, 2)
edges <- combn(nodes, 2)
edges
incidence_matrix <- matrix(0, nrow = length(nodes), ncol = length(edges))
incidence_matrix
100000*99999/2
combn(100000, 2)
combn(1:100000, 2)
combn(1:1000, 2)
nodes <- gen_nodes(d)
n <- lenght(nodes)
n <- length(nodes)
edges <- combn(1:n, 2)
edges
nodes <- gen_nodes(d)
nv <- length(nodes)
edges <- combn(1:nv, 2)
ne <- length(edges)
incidence_matrix <- matrix(0, nrow = n, ncol =  ne)
sapply(1:n_edges, function(e) edges[ ,e])
nodes <- gen_nodes(d)
n_voters <- length(nodes)
edges <- combn(nodes, 2)
sapply(1:n_edges, function(e) edges[ ,e])
n_edges <- length(edges)
sapply(1:n_edges, function(e) edges[ ,e])
edges <- combn(nodes, 2)
n_edges <- dim(edges)[2]
sapply(1:n_edges, function(e) edges[ ,e])
sapply(1:n_edges, function(e) paste0(edges[ ,e], collapase = ""))
sapply(1:n_edges, function(e) paste0(edges[ ,e], collapase = " "))
sapply(1:n_edges, function(e) paste(edges[ ,e], collapase = " ="))
sapply(1:n_edges, function(e) paste(edges[ ,e], collapase = ""))
apply(edges, 2, paste, collapse = "")
as.character(apply(edges, 2, paste, collapse = "")
)
incidence_matrix <- matrix(
0,
nrow = n_voters,
ncol =  n_edges,
dimnames = list(nodes[1:n_voters], as.character(apply(edges, 2, paste, collapse = "")))
)
incidence_matrix
i <- 1
votes_yes <- which(d[i, ])
d[i, ]
votes_yes <- which(as.logical(d[i, ]))
votes_yes
label = c(
row.names(d),
paste0("y", 1:ncol(d)),
paste0("n", 1:ncol(d))
)
list(
voter = 1:nrow(d),
y = (nrow(d) + 1):(nrow(d) + ncol(d)),
n = (nrow(d) + ncol(d) + 1):(nrow(d) + 2*ncol(d)),
label = label
)
}
gen_nodes <- function(d) {
label = c(
row.names(d),
paste0("y", 1:ncol(d)),
paste0("n", 1:ncol(d))
)
list(
voter = 1:nrow(d),
y = (nrow(d) + 1):(nrow(d) + ncol(d)),
n = (nrow(d) + ncol(d) + 1):(nrow(d) + 2*ncol(d)),
label = label
)
}
gen_nodes(d)
nodes <- gen_nodes(d)
nodes <- gen_nodes(d)
n_voters <- length(nodes$voter)
edges <- combn(nodes$label, 2)
n <- length(nodes$label)
edges <- combn(nodes$label, 2)
n
nodes <- gen_nodes(d)
n <- length(nodes$label)
incidence_matrix <- matrix(
0,
nrow = n_voters,
ncol =  n * (n - 1) / 2
)
nodes <- gen_nodes(d)
n <- length(nodes$label)
edges <- combn(nodes$label, 2)
incidence_matrix <- matrix(
0,
nrow = n_voters,
ncol =  n * (n - 1) / 2,
dimnames = list(nodes[1:n_voters], as.character(apply(edges, 2, paste, collapse = "")))
)
incidence_matrix
n_issues <- nrow(d)
votes_yes <- which(as.logical(d[i, ]))
votes_yes
votes_yes <- as.logical(d[i, ])
voters <- nodes$voter
nodes <- gen_nodes(d)
n <- length(nodes$label)
voters <- nodes$label[nodes$voter]
edges <- combn(nodes$label, 2)
incidence_matrix <- matrix(
0,
nrow = n_voters,
ncol =  n * (n - 1) / 2,
dimnames = list(nodes$label[1:n_voters], as.character(apply(edge, 2, paste, collapse = "")))
)
incidence_matrix <- matrix(
0,
nrow = n_voters,
ncol =  n * (n - 1) / 2,
dimnames = list(nodes$label[1:n_voters], as.character(apply(edges, 2, paste, collapse = "")))
)
n_issues <- nrow(d)
i
votes_yes <- as.logical(d[i, ])
adj_mat <- matrix(
0,
nrow = n,
ncol =  n
)
nodes <- gen_nodes(d)
n <- length(nodes$label)
edges <- combn(nodes$label, 2)
adj_mat <- matrix(
0,
nrow = n,
ncol =  n
)
for (i in 1:nrow(d)) {
votes_yes <- as.logical(d[i, ])
adj_mat[nodes$y[votes_yes], ] <- 1
adj_mat[nodes$n[!votes_yes], ] <- 1
}
adj_mat
d
i
nodes <- gen_nodes(d)
n <- length(nodes$label)
edges <- combn(nodes$label, 2)
adj_mat <- matrix(
0,
nrow = n,
ncol =  n
)
for (i in 1:nrow(d)) {
votes_yes <- as.logical(d[i, ])
adj_mat[nodes$y[votes_yes]] <- 1
adj_mat[nodes$n[!votes_yes]] <- 1
}
adj_mat
nodes <- gen_nodes(d)
n <- length(nodes$label)
adj_mat <- matrix(
0,
nrow = n,
ncol =  n,
dimnames = list(nodes$label, nodes$label)
)
adj_mat
nodes <- gen_nodes(d)
n <- length(nodes$label)
adj_mat <- matrix(
0,
nrow = n,
ncol =  n,
dimnames = list(nodes$label, nodes$label)
)
for (i in 1:nrow(d)) {
votes_yes <- as.logical(d[i, ])
adj_mat[i, nodes$y[votes_yes]] <- 1
adj_mat[nodes$y[votes_yes], i] <- 1
adj_mat[i, nodes$n[!votes_yes]] <- 1
adj_mat[nodes$n[!votes_yes], i] <- 1
}
adj_mat
library(igraph)
as_incidence_matrix(graph_from_adjacency_matrix(adj_mat))
Rcpp::sourceCpp('R/cppUtils.cpp')
Rcpp::sourceCpp('R/cppUtils.cpp')
Rcpp::sourceCpp('R/cppUtils.cpp')
Rcpp::sourceCpp('R/cppUtils.cpp')
incidence_matrix()
incidence_matrix
gen_adj_matrix <- function(d) {
nodes <- gen_nodes(d)
n <- length(nodes$label)
adj_mat <- matrix(
0,
nrow = n,
ncol =  n,
dimnames = list(nodes$label, nodes$label)
)
for (i in 1:nrow(d)) {
votes_yes <- as.logical(d[i, ])
adj_mat[i, nodes$y[votes_yes]] <- 1
adj_mat[nodes$y[votes_yes], i] <- 1
adj_mat[i, nodes$n[!votes_yes]] <- 1
adj_mat[nodes$n[!votes_yes], i] <- 1
}
}
gen_adj_matrix <- function(d) {
nodes <- gen_nodes(d)
n <- length(nodes$label)
adj_mat <- matrix(
0,
nrow = n,
ncol =  n,
dimnames = list(nodes$label, nodes$label)
)
for (i in 1:nrow(d)) {
votes_yes <- as.logical(d[i, ])
adj_mat[i, nodes$y[votes_yes]] <- 1
adj_mat[nodes$y[votes_yes], i] <- 1
adj_mat[i, nodes$n[!votes_yes]] <- 1
adj_mat[nodes$n[!votes_yes], i] <- 1
}
adj_mat
}
gen_adj_matrix(d)
adj <- gen_adj_matrix(d)
incidence_matrix(adj)
Rcpp::sourceCpp('R/cppUtils.cpp')
Rcpp::sourceCpp('R/cppUtils.cpp')
Rcpp::sourceCpp('R/cppUtils.cpp')
inc <- incidence_matrix(adj)
View(inc)
Rcpp::sourceCpp('R/cppUtils.cpp')
Rcpp::sourceCpp('R/cppUtils.cpp')
library(devtools)
document()
install()
rm(list = ls())
help(package = 'minHomVoting')
Rcpp::sourceCpp('R/cppUtils.cpp')
devtools::document()
devtools::install()
devtools::document()
devtools::document()
Rcpp::sourceCpp('R/cppUtils.cpp')
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
rm(list =ls())
remove.packages("minHomVotin")
remove.packages("minHomVoting")
devtools::document()
devtools::install()
library(minHomVoting)
data("onedim_voting")
d <- onedim_voting
d
adj_mat <- gen_adj_matrix(d)
adj_mat
devtools::install()
adj_mat <- gen_adj_matrix(d)\
adj_mat <- gen_adj_matrix(d)
adjacency_to_incidence(adj_mat)
devtools::document()
devtools::install()
devtools::install()
remove.packages("minHomVoting")
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
packrat::disable()
devtools::install()
devtools::document()
devtools::install()
Rcpp.package.skeleton("minHomVoting")
linrary(Rcpp)
library(Rcpp)
Rcpp.package.skeleton("minHomVoting")
devtools::document()
devtools::install()
packrat::init()
Rcpp::sourceCpp('src/cppUtils.cpp')
compileAttributes()
Rcpp::sourceCpp('src/cppUtils.cpp')
Rcpp::sourceCpp('src/cppUtils.cpp')
a = diag(1)
a = idag(2)
a = diag(2)
adjacency_to_incidence(a)
Rcpp::sourceCpp('src/cppUtils.cpp')
adjacency_to_incidence(a)
a = diag(3)
adjacency_to_incidence(a)
Rcpp::sourceCpp('src/cppUtils.cpp')
Rcpp::sourceCpp('src/cppUtils.cpp')
adjacency_to_incidence(a)
a
Rcpp::sourceCpp('src/cppUtils.cpp')
a
adj_to_inc(a)
adj_to_inc_reduced(a)
Rcpp::sourceCpp('src/cppUtils.cpp')
a = matrix(c(0, 1, 0, 1, 0, 1, 0, 1, 0), nrow = 3)
a
adj_to_inc(a)
adj_to_inc_reduced(a)
Rcpp::sourceCpp('src/cppUtils.cpp')
adj_to_inc_reduced(a)
Rcpp::sourceCpp('src/cppUtils.cpp')
adj_to_inc(a)
Rcpp::sourceCpp('src/cppUtils.cpp')
adj_to_inc(a)
Rcpp::sourceCpp('src/cppUtils.cpp')
adj_to_inc(a)
Rcpp::sourceCpp('src/cppUtils.cpp')
adj_to_inc(a)
Rcpp::sourceCpp('src/cppUtils.cpp')
adj_to_inc(a)
Matrix::rankMatrix(a)
Matrix::rankMatrix(adj_to_inc(a))
Matrix::rankMatrix(adj_to_inc_reduced(a))
data("onedim_voting")
d <- onedim_voting
nodes <- gen_nodes(d)
library(minHomVoting)
nodes <- gen_nodes(d)
devtools::document()
nodes <- gen_nodes(d)
nodes
adj_mat <- gen_adj_matrix(d)
adj_mat
li <- list(c(nodes, list(adj_mat = adj_mat)))
class(li) <- "roll_call"
li
nodes <- gen_nodes(d)
adj_mat <- gen_adj_matrix(d)
li <- c(nodes, list(adj_mat = adj_mat))
class(li) <- "roll_call"
li
input_roll_call <- function(d) {
nodes <- gen_nodes(d)
adj_mat <- gen_adj_matrix(d)
li <- c(nodes, list(adj_mat = adj_mat))
class(li) <- "roll_call"
li
}
roll_call <- input_roll_call(d)
roll_call
inc <- adj_to_inc_reduced(roll_call$adj_mat)
roll_call$adj_mat
adj_to_inc_reduced()
adj_to_inc_reduced
devtools::document()
devtools::install()
packrat::disable()
setwd("C:/Github/minHomVoting")
